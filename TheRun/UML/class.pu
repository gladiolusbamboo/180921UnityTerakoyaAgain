@startuml TheRun
class GameEnum{
    + MOVE_DIR : enum
    + GAME_MODE : enum
}

namespace Player{
    interface IHitEventHandler{
        + DoEvent() : void
    }
}

interface ILabelDisplayer{
    + Show() : void
}

namespace UI{
    interface IButtonHandler{
        + Tap() : void
        + Release() : void
    }

    interface IPlayerButtonAction{
        + TapAction() : void
        + ReleaseAction() : void
    }

    class LeftButtonHandler{
        + playerLeftMover : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    LeftButtonHandler ..|> IButtonHandler
    LeftButtonHandler --> IPlayerButtonAction
    
    class RightButtonHandler{
        + playerRightMover : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    RightButtonHandler ..|> IButtonHandler
    RightButtonHandler --> IPlayerButtonAction
    
    class JumpButtonHandler{
        + playerJumper : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    JumpButtonHandler ..|> IButtonHandler
    JumpButtonHandler --> IPlayerButtonAction

    class ButtonUsingManager{
        - isUsing : bool
        - Start() : void
        ~ SetIsUsing(bool) : void
        ~ GetIsUsing() : bool
    }

    class ButtonsActivator{
        + buttons : GameObject
        + SetActive(bool isActive) : void
    }

}

namespace Player{
    class PlayerLeftMover{
        + leftButtonUsingManager : ButtonUsingManager
        + PlayerMover
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerLeftMover ..|> UI.IPlayerButtonAction
    PlayerLeftMover --> UI.ButtonUsingManager
    PlayerLeftMover --> PlayerMover

    class PlayerRightMover{
        + rightButtonUsingManager : ButtonUsingManager
        + PlayerMover
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerRightMover ..|> UI.IPlayerButtonAction
    PlayerRightMover --> UI.ButtonUsingManager
    PlayerRightMover --> PlayerMover

    class PlayerMover{
        + Rigidbody2D
        - moveDirection = GameEnum.MOVE_DIR.STOP : GameEnum.MOVE_DIR
        - moveSpeed : float
        - MOVE_SPEED = 3f : const float 
        - FixedUpdate() : void
        ~ SetMoveDirection(GameEnum.MOVE_DIR dir) : void
        ~ Stop() : void
    }
    PlayerMover --> .GameEnum

    class PlayerJumper{
        + Rigidbody2D
        + jumpPower : float
        - goJump : bool
        + blockLayer : LayerMask
        + Animator
        - FixedUpdate() : void
        ~ ButtonJump() : void
        ~ Jump() : void
        - canJump() : bool
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerJumper ..|>  UI.IPlayerButtonAction

    class PlayerHitSensor{
        + GameModeManager
        - OnTriggerEnter2D(Collider2D collision) : void
    }
    PlayerHitSensor --> GameManager.GameModeManager
    PlayerHitSensor --> Player.IHitEventHandler
    PlayerHitSensor --> .GameEnum

    class PlayerDestroyer{
        ~ Destroy() : void
    }
}

namespace KeyboardInput{
    class KeyboardHandler{
        + PlayerMover
        + PlayerJumper
        + rightButtonUsingManager : ButtonUsingManager
        + leftButtonUsingManager : ButtonUsingManager
        + jumpButtonUsingManager : ButtonUsingManager
        + GameModeManager
        - Update() : void
    }
    KeyboardHandler --> Player.PlayerMover
    KeyboardHandler --> Player.PlayerJumper
    KeyboardHandler --> UI.ButtonUsingManager
    KeyboardHandler --> GameManager.GameModeManager
}

namespace GameScene{
    class GameOverDisplayer{
        + gameOver : GameObject
        ~ Show() : void
    }
    GameOverDisplayer ..|> .ILabelDisplayer

    class GameClearDisplayer{
        + gameClear : GameObject
        ~ Show() : void
    }
    GameClearDisplayer ..|> .ILabelDisplayer
}

namespace GameManager{
    class GameModeManager{
        - gameMode : GameEnum.GAME_MODE
        - Start() : void
        ~ GetGameMode() : GameEnum.GAME_MODE
        ~ SetGameMode(GameEnum.GAME_MODE gameMode) : void
    }
    GameModeManager --> .GameEnum
}

namespace Enemy{
    class EnemyMover{
        - moveDirection : GameEnum.MOVE_DIR
        + Rigidbody2D
        + moveSpeed : float
        + blockLayer : LayerMask
        - Start() : void
        - FixedUpdate() : void
    }
    EnemyMover --> .GameEnum

    class EnemyHitHandler{
        + player : Transform
        + PlayerJumper
        + PlayerDestroyer
        + EnemyDestroyer
        ~ gameOverDisplayer : ILabelDisplayer
        - Start() : void
        + DoEvent() : void
    }
    EnemyHitHandler ..|> Player.IHitEventHandler
    EnemyHitHandler --> Player.PlayerJumper
    EnemyHitHandler --> Player.PlayerDestroyer
    EnemyHitHandler --> EnemyDestroyer

    class EnemyDestroyer{
        ~ Destroy() : void
    }

}

namespace Orb{
    class OrbDestroyer{
        ~ Destroy() : void
    }

    class OrbHitHandler{
        + OrbDestroyer
        + OrbManager
        + ScoreManager
        + DoEvent() : void
    }
    OrbHitHandler --> OrbDestroyer
    OrbHitHandler --> OrbManager
    OrbHitHandler --> Score.ScoreManager
    OrbHitHandler ..|> Player.IHitEventHandler

    class OrbManager{
        + ORB_POINT : int
        ~ GetOrbPoint() : int
    }

}

namespace Score{
    class ScoreManager{
        + int MAX_SCORE = 999999
        - int score = 0
        - Awake() : void
        ~ AddScore(int point) : void
        ~ GetScore() : int
    }

    class ScoreDisplayer{
        + ScoreManager
        - displayScore = 0 : int
        + textComponent : Text
        - Update() : void
        - RefreshScore() : void
    }
    ScoreDisplayer --> ScoreManager : ç›£è¦–
}

namespace OutZone{
    class OutZoneHitHandler{
        ~ gameOverDisplayer : ILabelDisplayer
        + PlayerDestroyer
        - Start() : void
        + DoEvent() : void
    }
    OutZoneHitHandler ..|> Player.IHitEventHandler
    OutZoneHitHandler --> .ILabelDisplayer
    OutZoneHitHandler --> Player.PlayerDestroyer
}

namespace Goal{
    class GoalHitHandler{
        ~ gameClearDisplayer : ILabelDisplayer
        + ButtonsActivator
        + GameModeManager
        - Start() : void
        + DoEvent() : void
    }
    GoalHitHandler ..|> Player.IHitEventHandler
    GoalHitHandler --> .ILabelDisplayer
    GoalHitHandler --> UI.ButtonsActivator
    GoalHitHandler --> GameManager.GameModeManager
    GoalHitHandler --> .GameEnum
}

@enduml