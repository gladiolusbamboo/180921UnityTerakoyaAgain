@startuml TheRun
class GameEnum{
    + MOVE_DIR : enum
    + GAME_MODE : enum
}

interface ILabelDisplayer{
    + Show() : void
}

namespace UI{
    interface IButtonTapEventer{
        + Tap() : void
        + Release() : void
    }

    interface IPlayerButtonAction{
        + TapAction() : void
        + ReleaseAction() : void
    }

    class LeftButtonEventer{
        + playerLeftMover : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    LeftButtonEventer ..|> IButtonTapEventer
    LeftButtonEventer --> IPlayerButtonAction
    
    class RightButtonEventer{
        + playerRightMover : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    RightButtonEventer ..|> IButtonTapEventer
    RightButtonEventer --> IPlayerButtonAction
    
    class JumpButtonEventer{
        + playerJumper : IPlayerButtonAction
        - Start() : void
        + Tap() : void
        + Release() : void
    }
    JumpButtonEventer ..|> IButtonTapEventer
    JumpButtonEventer --> IPlayerButtonAction

    class ButtonUsingManager{
        - isUsing : bool
        - Start() : void
        ~ SetIsUsing(bool) : void
        ~ GetIsUsing() : bool
    }

    class ButtonsActivator{
        + buttons : GameObject
        + SetActive(bool isActive) : void
    }

}

namespace Player{
    interface IPlayerHitEventer{
        + Handle() : void
    }

    interface IPlayerMissAnimator{
        + Animate() : void
    }

    class PlayerLeftMover{
        + PlayerMover
        + leftButtonUsingManager : ButtonUsingManager
        + PlayerMoveAnimator
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerLeftMover ..|> UI.IPlayerButtonAction
    PlayerLeftMover --> PlayerMover
    PlayerLeftMover --> UI.ButtonUsingManager
    PlayerLeftMover --> PlayerMoveAnimator

    class PlayerRightMover{
        + PlayerMover
        + rightButtonUsingManager : ButtonUsingManager
        + PlayerMoveAnimator
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerRightMover ..|> UI.IPlayerButtonAction
    PlayerRightMover --> PlayerMover
    PlayerRightMover --> UI.ButtonUsingManager
    PlayerRightMover --> PlayerMoveAnimator

    class PlayerMover{
        + Rigidbody2D
        - moveDirection = GameEnum.MOVE_DIR.STOP : GameEnum.MOVE_DIR
        - moveSpeed : float
        - MOVE_SPEED = 3f : const float 
        - FixedUpdate() : void
        ~ SetMoveDirection(GameEnum.MOVE_DIR dir) : void
        ~ Stop() : void
    }
    PlayerMover --> .GameEnum

    class PlayerJumper{
        + Rigidbody2D
        + jumpPower : float
        - goJump : bool
        + blockLayer : LayerMask
        + PlayerMoveAnimator
        - FixedUpdate() : void
        ~ ButtonJump() : void
        ~ Jump() : void
        - CanJump() : bool
        + TapAction() : void
        + ReleaseAction() : void
    }
    PlayerJumper ..|>  UI.IPlayerButtonAction
    PlayerJumper --> PlayerMoveAnimator

    class PlayerHitHandler{
        + GameModeManager
        - OnTriggerEnter2D(Collider2D collision) : void
    }
    PlayerHitHandler --> GameManager.GameModeManager
    PlayerHitHandler --> Player.IPlayerHitEventer
    PlayerHitHandler --> .GameEnum

    class PlayerDestroyer{
        ~ Destroy() : void
    }

     class PlayerEnemyHitAnimator{
         + CircleCollider2D
         + BoxCollider2D
         + PlayerDestroyer
         + Animate() : void
    }
    PlayerEnemyHitAnimator ..|> IPlayerMissAnimator
    PlayerEnemyHitAnimator --> PlayerDestroyer

    class PlayerOutZoneAnimator{
        + CircleCollider2D
        + BoxCollider2D
        + PlayerDestroyer
        + Animate() : void
    }
    PlayerOutZoneAnimator ..|> IPlayerMissAnimator
    PlayerOutZoneAnimator --> PlayerDestroyer

    class PlayerMoveAnimator{
        + Animator
        ~ Jump() : void
        ~ Stop() : void
        ~ Move() : void
    }

}

namespace KeyboardInput{
    class KeyboardEventer{
        + PlayerMover
        + PlayerJumper
        + rightButtonUsingManager : ButtonUsingManager
        + leftButtonUsingManager : ButtonUsingManager
        + jumpButtonUsingManager : ButtonUsingManager
        + PlayerMoveAnimator
        + GameModeManager
        - Update() : void
    }
    KeyboardEventer --> Player.PlayerMover
    KeyboardEventer --> Player.PlayerJumper
    KeyboardEventer --> UI.ButtonUsingManager
    KeyboardEventer --> GameManager.GameModeManager
    KeyboardEventer --> Player.PlayerMoveAnimator
}

namespace GameScene{
    class GameOverDisplayer{
        + gameOver : GameObject
        ~ Show() : void
    }
    GameOverDisplayer ..|> .ILabelDisplayer

    class GameClearDisplayer{
        + gameClear : GameObject
        ~ Show() : void
    }
    GameClearDisplayer ..|> .ILabelDisplayer
}

namespace GameManager{
    class GameModeManager{
        - gameMode : GameEnum.GAME_MODE
        - Start() : void
        ~ GetGameMode() : GameEnum.GAME_MODE
        ~ SetGameMode(GameEnum.GAME_MODE gameMode) : void
    }
    GameModeManager --> .GameEnum
}

namespace Enemy{
    class EnemyMover{
        - moveDirection : GameEnum.MOVE_DIR
        + Rigidbody2D
        + moveSpeed : float
        + blockLayer : LayerMask
        - Start() : void
        - FixedUpdate() : void
    }
    EnemyMover --> .GameEnum

    class EnemyHitEventer{
        + player : Transform
        + PlayerJumper
        + PlayerEnemyHitAnimator : IPlayerMissAnimator
        + EnemyDestroyer
        + GameModeManager
        ~ gameOverDisplayer : ILabelDisplayer
        - Start() : void
        + Handle() : void
    }
    EnemyHitEventer ..|> Player.IPlayerHitEventer
    EnemyHitEventer --> Player.PlayerJumper
    EnemyHitEventer --> Player.IPlayerMissAnimator
    EnemyHitEventer --> EnemyDestroyer
    EnemyHitEventer --> GameManager.GameModeManager
    EnemyHitEventer --> .ILabelDisplayer

    class EnemyDestroyer{
        ~ Destroy() : void
    }

}

namespace Orb{
    class OrbDestroyer{
        ~ Destroy() : void
    }

    class OrbHitEventer{
        + OrbDestroyer
        + OrbManager
        + ScoreManager
        + Handle() : void
    }
    OrbHitEventer ..|> Player.IPlayerHitEventer
    OrbHitEventer --> OrbDestroyer
    OrbHitEventer --> OrbManager
    OrbHitEventer --> Score.ScoreManager

    class OrbManager{
        + ORB_POINT : int
        ~ GetOrbPoint() : int
    }

}

namespace Score{
    class ScoreManager{
        + int MAX_SCORE = 999999
        - int score = 0
        - Awake() : void
        ~ AddScore(int point) : void
        ~ GetScore() : int
    }

    class ScoreDisplayer{
        + ScoreManager
        - displayScore = 0 : int
        + textComponent : Text
        - Update() : void
        - RefreshScore() : void
    }
    ScoreDisplayer --> ScoreManager : 監視
}

namespace OutZone{
    class OutZoneHitEventer{
        ~ gameOverDisplayer : ILabelDisplayer
        + PlayerOutZoneAnimator : IPlayerMissAnimator
        + GameModeManager
        - Start() : void
        + Handle() : void
    }
    OutZoneHitEventer ..|> Player.IPlayerHitEventer
    OutZoneHitEventer --> .ILabelDisplayer
    OutZoneHitEventer --> Player.IPlayerMissAnimator
    OutZoneHitEventer --> GameManager.GameModeManager    
}

namespace Goal{
    class GoalHitEventer{
        ~ gameClearDisplayer : ILabelDisplayer
        + ButtonsActivator
        + GameModeManager
        - Start() : void
        + Handle() : void
    }
    GoalHitEventer ..|> Player.IPlayerHitEventer
    GoalHitEventer --> .ILabelDisplayer
    GoalHitEventer --> UI.ButtonsActivator
    GoalHitEventer --> GameManager.GameModeManager
    GoalHitEventer --> .GameEnum
}

namespace Needle{
    class NeedleHitEventer{
        ~ gameOverDisplayer : ILabelDisplayer
        + PlayerEnemyHitAnimator : IPlayerMissAnimator
        + GameModeManager
        - Start() : void
        + Handle() : void
    }
    NeedleHitEventer ..|> Player.IPlayerHitEventer
    NeedleHitEventer --> Player.IPlayerMissAnimator
    NeedleHitEventer --> GameManager.GameModeManager
    NeedleHitEventer --> .ILabelDisplayer
}
@enduml